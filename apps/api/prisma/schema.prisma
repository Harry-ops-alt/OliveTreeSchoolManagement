generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  SCHOOL_ADMIN
  OPERATIONS_MANAGER
  BRANCH_MANAGER
  ADMISSIONS_OFFICER
  FINANCE_MANAGER
  FINANCE_OFFICER
  TEACHER
  TEACHING_ASSISTANT
  TRAINER
  TRAINEE
  SUPPORT_STAFF
  PARENT_GUARDIAN
  STUDENT
}

enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

enum AttendanceSessionStatus {
  OPEN
  SUBMITTED
  FINALIZED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  UNSPECIFIED
}

enum StudentStatus {
  PROSPECT
  APPLIED
  ENROLLED
  INACTIVE
  GRADUATED
  WITHDRAWN
  ARCHIVED
}

enum AdmissionLeadStage {
  NEW
  CONTACTED
  TASTER_BOOKED
  ATTENDED
  OFFER
  ACCEPTED
  ENROLLED
  ONBOARDED
}

enum AdmissionContactChannel {
  CALL
  EMAIL
  SMS
  IN_PERSON
  NOTE
}

enum AdmissionTasterStatus {
  INVITED
  CONFIRMED
  ATTENDED
  NO_SHOW
  CANCELLED
}

enum AdmissionApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  OFFER_SENT
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum AdmissionDecision {
  OFFERED
  WAITLISTED
  REJECTED
}

enum AdmissionTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum StaffAssignmentRole {
  LEAD_TEACHER
  ASSISTANT
  SUBSTITUTE
  SUPPORT
}

enum FinanceTransactionType {
  INVOICE
  PAYMENT
  REFUND
  EXPENSE
}

model Organization {
  id        String     @id @default(uuid())
  name      String     @unique
  branches  Branch[]
  users     User[]
  guardians Guardian[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Branch {
  id                    String                   @id @default(uuid())
  name                  String
  addressLine1          String?
  addressLine2          String?
  city                  String?
  state                 String?
  postalCode            String?
  country               String?
  timezone              String?
  phone                 String?
  email                 String?
  notes                 String?
  organizationId        String
  organization          Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  users                 User[]
  students              StudentProfile[]
  teachers              TeacherProfile[]
  admissions            Admission[]
  transactions          FinanceTransaction[]
  classrooms            Classroom[]
  classSchedules        ClassSchedule[]
  attendanceSessions    AttendanceSession[]
  guardians             Guardian[]
  admissionLeads        AdmissionLead[]
  admissionTasters      AdmissionTasterSession[]
  admissionApplications AdmissionApplication[]
  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @updatedAt
}

model User {
  id                            String                      @id @default(uuid())
  email                         String                      @unique
  passwordHash                  String
  role                          Role
  firstName                     String
  lastName                      String
  organizationId                String?
  branchId                      String?
  organization                  Organization?               @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  branch                        Branch?                     @relation(fields: [branchId], references: [id], onDelete: SetNull)
  teacherProfile                TeacherProfile?
  studentProfile                StudentProfile?
  attendanceSessionsCreated     AttendanceSession[]         @relation("AttendanceSessionsCreated")
  attendanceRecordsRecorded     AttendanceRecord[]          @relation("AttendanceRecordsRecorded")
  staffAssignments              StaffAssignment[]
  admissionLeadsAssigned        AdmissionLead[]             @relation("AdmissionLeadAssignedStaff")
  admissionLeadContacts         AdmissionLeadContact[]
  admissionLeadStageChanges     AdmissionLeadStageHistory[] @relation("AdmissionLeadStageChangedBy")
  admissionTasterSessions       AdmissionTasterSession[]    @relation("AdmissionTasterAssignedStaff")
  admissionApplicationsReviewed AdmissionApplication[]      @relation("AdmissionApplicationReviewedBy")
  admissionOfferLettersSigned   AdmissionOfferLetter[]      @relation("AdmissionOfferSignedBy")
  admissionTasksAssigned        AdmissionTask[]             @relation("AdmissionTaskAssignee")
  admissionTasksCreated         AdmissionTask[]             @relation("AdmissionTaskCreator")
  savedLeadViews                AdmissionLead[]             @relation("AdmissionLeadSavedBy")
  createdAt                     DateTime                    @default(now())
  updatedAt                     DateTime                    @updatedAt
}

model StudentProfile {
  id                     String                   @id @default(uuid())
  userId                 String                   @unique
  branchId               String
  classroomId            String?
  studentNumber          String                   @unique
  dateJoined             DateTime                 @default(now())
  email                  String?
  phone                  String?
  alternatePhone         String?
  enrollmentDate         DateTime                 @default(now())
  status                 StudentStatus            @default(PROSPECT)
  dateOfBirth            DateTime?
  gender                 Gender?
  gradeLevel             String?
  homeroom               String?
  primaryLanguage        String?
  additionalSupportNotes String?
  medicalNotes           String?
  addressLine1           String?
  addressLine2           String?
  city                   String?
  state                  String?
  postalCode             String?
  country                String?
  notes                  String?
  isArchived             Boolean                  @default(false)
  archivedAt             DateTime?
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch                 Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  classroom              Classroom?               @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  admissions             Admission[]
  guardians              StudentGuardian[]
  attendanceRecords      AttendanceRecord[]
  classEnrollments       StudentClassEnrollment[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt

  @@index([branchId])
  @@index([branchId, gradeLevel])
  @@index([classroomId])
}

model Guardian {
  id             String            @id @default(uuid())
  organizationId String
  branchId       String?
  firstName      String
  lastName       String
  email          String?
  phone          String?
  alternatePhone String?
  addressLine1   String?
  addressLine2   String?
  city           String?
  state          String?
  postalCode     String?
  country        String?
  notes          String?
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  branch         Branch?           @relation(fields: [branchId], references: [id], onDelete: SetNull)
  students       StudentGuardian[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([organizationId])
  @@index([branchId])
}

model StudentGuardian {
  id           String         @id @default(uuid())
  studentId    String
  guardianId   String
  relationship String?
  isPrimary    Boolean        @default(false)
  contactOrder Int?
  student      StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  guardian     Guardian       @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([studentId, guardianId])
  @@index([guardianId])
}

model TeacherProfile {
  id             String          @id @default(uuid())
  userId         String          @unique
  branchId       String
  hireDate       DateTime        @default(now())
  subjects       String[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch         Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade)
  classSchedules ClassSchedule[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([branchId])
}

model Admission {
  id        String          @id @default(uuid())
  studentId String
  branchId  String
  status    AdmissionStatus @default(PENDING)
  appliedAt DateTime        @default(now())
  decidedAt DateTime?
  notes     String?
  student   StudentProfile  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  branch    Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@index([studentId])
}

model FinanceTransaction {
  id          String                 @id @default(uuid())
  branchId    String
  type        FinanceTransactionType
  amount      Decimal                @db.Decimal(12, 2)
  occurredAt  DateTime               @default(now())
  reference   String?
  description String?
  branch      Branch                 @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@index([branchId])
}

model Classroom {
  id                      String                   @id @default(uuid())
  branchId                String
  name                    String
  capacity                Int?
  description             String?
  branch                  Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  schedules               ClassSchedule[]
  attendance              AttendanceSession[]
  students                StudentProfile[]
  classroomStaff          StaffAssignment[]
  admissionTasterSessions AdmissionTasterSession[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  @@index([branchId])
}

model ClassSchedule {
  id                 String                   @id @default(uuid())
  branchId           String
  classroomId        String?
  teacherProfileId   String?
  title              String
  description        String?
  dayOfWeek          DayOfWeek
  startTime          DateTime
  endTime            DateTime
  isRecurring        Boolean                  @default(true)
  branch             Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  classroom          Classroom?               @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  teacherProfile     TeacherProfile?          @relation(fields: [teacherProfileId], references: [id], onDelete: SetNull)
  assignments        StaffAssignment[]
  attendanceSessions AttendanceSession[]
  studentEnrollments StudentClassEnrollment[]
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt

  @@index([branchId, dayOfWeek])
  @@index([classroomId])
  @@index([teacherProfileId])
}

model StudentClassEnrollment {
  id              String   @id @default(uuid())
  studentId       String
  classScheduleId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  student       StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classSchedule ClassSchedule  @relation(fields: [classScheduleId], references: [id], onDelete: Cascade)

  @@unique([studentId, classScheduleId])
  @@index([classScheduleId])
  @@index([studentId])
}

model AdmissionLead {
  id                 String                      @id @default(uuid())
  branchId           String?
  assignedStaffId    String?
  parentFirstName    String
  parentLastName     String
  parentEmail        String
  parentPhone        String?
  studentFirstName   String?
  studentLastName    String?
  studentDateOfBirth DateTime?
  programmeInterest  String?
  preferredContactAt DateTime?
  source             String?
  notes              String?
  tags               String[]                    @default([])
  metadata           Json?
  stage              AdmissionLeadStage          @default(NEW)
  branch             Branch?                     @relation(fields: [branchId], references: [id], onDelete: SetNull)
  assignedStaff      User?                       @relation("AdmissionLeadAssignedStaff", fields: [assignedStaffId], references: [id], onDelete: SetNull)
  contacts           AdmissionLeadContact[]
  stageHistory       AdmissionLeadStageHistory[]
  tastings           AdmissionTasterAttendee[]
  application        AdmissionApplication?
  tasks              AdmissionTask[]             @relation("AdmissionTaskLead")
  savedViewName      String?
  savedViewFilters   Json?
  isDefaultView      Boolean                     @default(false)
  sharedWithOrg      Boolean                     @default(false)
  savedById          String?
  savedBy            User?                       @relation("AdmissionLeadSavedBy", fields: [savedById], references: [id], onDelete: SetNull)
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt

  @@index([branchId])
  @@index([assignedStaffId])
  @@index([stage])
  @@index([parentEmail])
  @@index([savedById])
  @@index([savedViewName])
}

model AdmissionLeadContact {
  id         String                  @id @default(uuid())
  leadId     String
  userId     String?
  channel    AdmissionContactChannel
  summary    String
  occurredAt DateTime                @default(now())
  metadata   Json?
  lead       AdmissionLead           @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user       User?                   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([leadId])
  @@index([userId])
}

model AdmissionLeadStageHistory {
  id          String              @id @default(uuid())
  leadId      String
  fromStage   AdmissionLeadStage?
  toStage     AdmissionLeadStage
  changedById String?
  reason      String?
  changedAt   DateTime            @default(now())
  metadata    Json?
  lead        AdmissionLead       @relation(fields: [leadId], references: [id], onDelete: Cascade)
  changedBy   User?               @relation("AdmissionLeadStageChangedBy", fields: [changedById], references: [id], onDelete: SetNull)

  @@index([leadId])
  @@index([toStage])
}

model AdmissionTasterSession {
  id              String                    @id @default(uuid())
  branchId        String
  classroomId     String?
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  capacity        Int?
  assignedStaffId String?
  branch          Branch                    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  classroom       Classroom?                @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  assignedStaff   User?                     @relation("AdmissionTasterAssignedStaff", fields: [assignedStaffId], references: [id], onDelete: SetNull)
  attendees       AdmissionTasterAttendee[]
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  @@index([branchId])
  @@index([classroomId])
  @@index([startTime])
}

model AdmissionTasterAttendee {
  id         String                 @id @default(uuid())
  tasterId   String
  leadId     String
  status     AdmissionTasterStatus  @default(INVITED)
  notes      String?
  attendedAt DateTime?
  taster     AdmissionTasterSession @relation(fields: [tasterId], references: [id], onDelete: Cascade)
  lead       AdmissionLead          @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@unique([tasterId, leadId])
  @@index([leadId])
}

model AdmissionApplication {
  id             String                     @id @default(uuid())
  leadId         String                     @unique
  branchId       String?
  yearGroup      String?
  requestedStart DateTime?
  status         AdmissionApplicationStatus @default(DRAFT)
  submittedAt    DateTime?
  reviewedById   String?
  decision       AdmissionDecision?
  decisionNotes  String?
  decisionAt     DateTime?
  extraData      Json?
  lead           AdmissionLead              @relation(fields: [leadId], references: [id], onDelete: Cascade)
  branch         Branch?                    @relation(fields: [branchId], references: [id], onDelete: SetNull)
  reviewedBy     User?                      @relation("AdmissionApplicationReviewedBy", fields: [reviewedById], references: [id], onDelete: SetNull)
  offer          AdmissionOfferLetter?
  tasks          AdmissionTask[]            @relation("AdmissionTaskApplication")
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt

  @@index([branchId])
  @@index([status])
}

model AdmissionOfferLetter {
  id              String               @id @default(uuid())
  applicationId   String               @unique
  templateKey     String
  issuedAt        DateTime             @default(now())
  expiresAt       DateTime?
  signedAt        DateTime?
  signedById      String?
  stripeSessionId String?
  metadata        Json?
  application     AdmissionApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  signedBy        User?                @relation("AdmissionOfferSignedBy", fields: [signedById], references: [id], onDelete: SetNull)

  @@index([issuedAt])
}

model AdmissionTask {
  id            String                @id @default(uuid())
  leadId        String?
  applicationId String?
  title         String
  description   String?
  dueAt         DateTime?
  completedAt   DateTime?
  assigneeId    String?
  createdById   String?
  status        AdmissionTaskStatus   @default(PENDING)
  metadata      Json?
  lead          AdmissionLead?        @relation("AdmissionTaskLead", fields: [leadId], references: [id], onDelete: Cascade)
  application   AdmissionApplication? @relation("AdmissionTaskApplication", fields: [applicationId], references: [id], onDelete: Cascade)
  assignee      User?                 @relation("AdmissionTaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy     User?                 @relation("AdmissionTaskCreator", fields: [createdById], references: [id], onDelete: SetNull)

  @@index([leadId])
  @@index([applicationId])
  @@index([assigneeId])
  @@index([status])
}

model StaffAssignment {
  id          String              @id @default(uuid())
  scheduleId  String
  userId      String
  classroomId String?
  role        StaffAssignmentRole @default(LEAD_TEACHER)
  assignedAt  DateTime            @default(now())
  schedule    ClassSchedule       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  classroom   Classroom?          @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([scheduleId, userId])
  @@index([userId])
  @@index([classroomId])
}

model AttendanceSession {
  id              String                  @id @default(uuid())
  branchId        String
  classScheduleId String?
  classroomId     String?
  date            DateTime
  status          AttendanceSessionStatus @default(OPEN)
  notes           String?
  createdById     String?
  submittedAt     DateTime?
  finalizedAt     DateTime?
  branch          Branch                  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  classSchedule   ClassSchedule?          @relation(fields: [classScheduleId], references: [id], onDelete: SetNull)
  classroom       Classroom?              @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  createdBy       User?                   @relation("AttendanceSessionsCreated", fields: [createdById], references: [id], onDelete: SetNull)
  records         AttendanceRecord[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@index([branchId, date])
  @@index([classScheduleId])
  @@index([classroomId])
  @@index([createdById])
}

model AttendanceRecord {
  id           String            @id @default(uuid())
  sessionId    String
  studentId    String
  status       AttendanceStatus  @default(PRESENT)
  notes        String?
  recordedById String?
  recordedAt   DateTime          @default(now())
  session      AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student      StudentProfile    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  recordedBy   User?             @relation("AttendanceRecordsRecorded", fields: [recordedById], references: [id], onDelete: SetNull)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@unique([sessionId, studentId])
  @@index([studentId])
  @@index([recordedById])
}
